from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from ai_module import ai_helper
from utils import get_mood_keyboard
import logging

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADDING_TASK, TRACKING_MOOD = range(2)

async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    await update.message.reply_text("–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å? –ù–∞–ø–∏—à–∏ –º–Ω–µ.")
    return ADDING_TASK

async def save_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É."""
    user_id = update.effective_user.id
    task_title = update.message.text
    # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –ë–î
    # –ù–∞–ø—Ä–∏–º–µ—Ä: database.add_task(user_id, task_title)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –∑–∞–¥–∞—á—É: {task_title}")
    await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ '{task_title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from utils import CHILD_MAIN_MENU_KEYBOARD # –ò–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=CHILD_MAIN_MENU_KEYBOARD)
    return ConversationHandler.END

async def show_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á."""
    user_id = update.effective_user.id
    # TODO: –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å
    # –ù–∞–ø—Ä–∏–º–µ—Ä: tasks = database.get_tasks_for_user(user_id)
    tasks = ["–ü–æ—á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã üîÅ", "–°–¥–µ–ª–∞—Ç—å —É—Ä–æ–∫–∏"] # –ó–∞–≥–ª—É—à–∫–∞
    if tasks:
        task_list = "\n".join([f"- {task}" for task in tasks])
        message = f"–í–æ—Ç —Ç–≤–æ–∏ –¥–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{task_list}"
    else:
        message = "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ª. –î–æ–±–∞–≤—å –Ω–æ–≤–æ–µ!"
    await update.message.reply_text(message)

async def track_mood(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."""
    await update.message.reply_text("–ö–∞–∫ —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è?", reply_markup=get_mood_keyboard())
    return TRACKING_MOOD

async def save_mood(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    mood_score = int(query.data.split('_')[1]) # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –∏–∑ callback_data

    # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ –ë–î
    # –ù–∞–ø—Ä–∏–º–µ—Ä: database.track_mood(user_id, mood_score, "")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ—Ç–∏–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood_score}")

    await query.edit_message_text(text=f"–°–ø–∞—Å–∏–±–æ! –¢—ã –æ—Ç–º–µ—Ç–∏–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood_score}/5.")
    # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from utils import CHILD_MAIN_MENU_KEYBOARD
    await query.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=CHILD_MAIN_MENU_KEYBOARD)
    return ConversationHandler.END

async def show_rewards(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã."""
    user_id = update.effective_user.id
    # TODO: –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö –∏ XP –∏–∑ –ë–î
    # –ù–∞–ø—Ä–∏–º–µ—Ä: xp = database.get_user_xp(user_id)
    xp = 150 # –ó–∞–≥–ª—É—à–∫–∞
    level = 2 # –ó–∞–≥–ª—É—à–∫–∞
    # –ù–∞–ø—Ä–∏–º–µ—Ä: rewards = database.get_available_rewards()
    rewards = ["_EXTRA_LIFE_", "–ü—è—Ç—ë—Ä–∫–∞ –ø–æ –ª—é–±–∏–º–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É", "30 –º–∏–Ω—É—Ç –∏–≥—Ä"] # –ó–∞–≥–ª—É—à–∫–∞
    reward_list = "\n".join([f"- {reward}" for reward in rewards])
    message = f"–£ —Ç–µ–±—è {xp} XP! –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {level}.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:\n{reward_list}"
    await update.message.reply_text(message)

async def get_ai_tip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–∞–µ—Ç AI-–ø–æ–¥—Å–∫–∞–∑–∫—É."""
    if ai_helper:
        tip = ai_helper.get_idea_for_child("—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ") # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await update.message.reply_text(f"üí° –ò–¥–µ—è –¥–Ω—è: {tip}")
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, –º–æ–π AI-–ø–æ–º–æ—â–Ω–∏–∫ —Å–µ–π—á–∞—Å –æ—Ç–¥—ã—Ö–∞–µ—Ç.")

async def get_daily_challenge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂."""
    if ai_helper:
        challenge = ai_helper.suggest_daily_challenge()
        await update.message.reply_text(f"üéÆ –ß–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è: {challenge}")
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, –º–æ–π AI-–ø–æ–º–æ—â–Ω–∏–∫ —Å–µ–π—á–∞—Å –æ—Ç–¥—ã—Ö–∞–µ—Ç.")
